Given an array arr[] of n integers. Check whether it contains a triplet that sums up to zero. 

Example 1:

Input: n = 5, arr[] = {0, -1, 2, -3, 1}
Output: 1
Explanation: 0, -1 and 1 forms a triplet
with sum equal to 0.
Example 2:

Input: n = 3, arr[] = {1, 2, 3}
Output: 0
Explanation: No triplet with zero sum exists. 

Your Task:
You don't need to read input or print anything. Your task is to complete the boolean function findTriplets() which takes the array arr[] and the size of the array (n) as inputs and print 1 if the function returns true else print 0 if the function returns false. 

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(1)

Constrains:
1 <= n <= 10^4
-106 <= Ai <= 10^6

class Solution{
  public:
    //Function to find triplets with zero sum.
    bool findTriplets(int arr[], int n)
    { 
        
        //Your code here
                       //  my approach(wrong)
    /*    for(int i = 0 ; i < n-2 ; i++){
      int sum = arr[i]+arr[i+1]; 
            for(int j = i+2 ; j < n ;j++){
             sum += arr[j];
             if(sum==0)
             return 1;
            }*/
                             //O(n^3)
       /*     for(int i = 0 ; i < n ; i++){
                for(int j = i + 1 ; j < n ; j++){
                    for(int k = j+1 ; k < n ; k++){
                      if(arr[i]+arr[j]+arr[k]==0)
                      return true;
                    }
                }
            }*/
                                   //O(n^2)
            sort(arr,arr+n);
            for(int i = 0 ; i < n ; i++){
                int l = i +1;
                int r = n-1;
                while(l < r){
                    int sum = arr[i]+arr[l]+arr[r];
                    if(sum==0)
                    return true;
                    else if(sum>0)
                    r--;
                    else
                    l++;
                }
            }
    
        return false ;
    }
};